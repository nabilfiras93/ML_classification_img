# -*- coding: utf-8 -*-
"""My RockPaperScissors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lax48FamHJhZkDA7VEdxYRg3G0CKx7Es
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import zipfile, os
import shutil


!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip


# EXTRACT
my_zip = '/tmp/rockpaperscissors.zip'
my_zip_ref = zipfile.ZipFile(my_zip, 'r')
my_zip_ref.extractall('/tmp')
my_zip_ref.close()


# CALLBACK -> HENTIKAN TRAINING SETELAH AKURASI PASS
class my_callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')> 0.97):
      self.model.stop_training = True

callbacks = my_callback()


base_dir_ = '/tmp/rockpaperscissors'
train_dir = os.path.join(base_dir_, 'train')
validation_dir = os.path.join(base_dir_, 'val')

rock_dir = os.path.join(base_dir_, 'rock')
paper_dir = os.path.join(base_dir_, 'paper')
scissors_dir = os.path.join(base_dir_, 'scissors')


# BUAT DIREKTORI TEMP
if not os.path.exists(train_dir):
  os.mkdir(train_dir)

if not os.path.exists(validation_dir):
  os.mkdir(validation_dir)


train_rock_dir, validation_rock_dir = train_test_split(os.listdir(rock_dir), test_size = 0.4)

train_paper_dir, validation_paper_dir = train_test_split(os.listdir(paper_dir), test_size = 0.4)

train_scissors_dir, validation_scissors_dir = train_test_split(os.listdir(scissors_dir), test_size = 0.4)


# BUAT DIREKTORI BATU GUNTING KERTAS

# DIR TRAINING
train_rock_ = os.path.join(train_dir, 'rock')
train_paper_ = os.path.join(train_dir, 'paper')
train_scissors_ = os.path.join(train_dir, 'scissors')

# DIR VALIDATION
validation_rock_ = os.path.join(validation_dir, 'rock')
validation_paper_ = os.path.join(validation_dir, 'paper')
validation_scissors_ = os.path.join(validation_dir, 'scissors')



# BUAT DIR TRAINING
if not os.path.exists(train_rock_) :
  os.mkdir(train_rock_)

if not os.path.exists(train_paper_) :
  os.mkdir(train_paper_)

if not os.path.exists(train_scissors_) :
  os.mkdir(train_scissors_)

# BUAT DIR VALIDATION

if not os.path.exists(validation_rock_) :
  os.mkdir(validation_rock_)

if not os.path.exists(validation_paper_) :
  os.mkdir(validation_paper_)

if not os.path.exists(validation_scissors_) :
  os.mkdir(validation_scissors_)



for file in train_rock_dir:
  shutil.copy(os.path.join(rock_dir, file), os.path.join(train_rock_, file))
for file in train_paper_dir:
  shutil.copy(os.path.join(paper_dir,file), os.path.join(train_paper_,file))
for file in train_scissors_dir:
  shutil.copy(os.path.join(scissors_dir,file), os.path.join(train_scissors_,file))
for file in validation_rock_dir:
  shutil.copy(os.path.join(rock_dir, file), os.path.join(validation_rock_,file))
for file in validation_paper_dir:
  shutil.copy(os.path.join(paper_dir,file), os.path.join(validation_paper_,file))
for file in validation_scissors_dir:
  shutil.copy(os.path.join(scissors_dir,file), os.path.join(validation_scissors_,file))


my_train_data_generate = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range=0.2,
                    fill_mode='nearest')

my_test_data_generate = ImageDataGenerator(
                    rescale=1./255,
                    horizontal_flip=True,
                    shear_range=0.2,
                    fill_mode='nearest')

my_train_generator = my_test_data_generate.flow_from_directory(
        train_dir,  
        target_size=(150, 150),
        batch_size= 32,
        class_mode='categorical')

my_validation_generator = my_test_data_generate.flow_from_directory(
        validation_dir,
        target_size=(150, 150),
        batch_size= 32, 
        class_mode='categorical')


model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

# DIOPTIMASI
model.compile(optimizer=tf.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])


# FITTING
history = model.fit(
    my_train_generator,
    steps_per_epoch = 25, 
    epochs = 20,
    validation_data = my_validation_generator,
    validation_steps = 5, 
    verbose =2,
      callbacks=[callbacks]
)


import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

yang_diupload = files.upload()

for fn in yang_diupload.keys():

  path_nya = fn 
  img = image.load_img(path_nya, target_size =(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  gambarnya = np.vstack([x])
  predict = model.predict(gambarnya, batch_size=10)

  print(fn)
  if predict[0,0]!=0:
    print('Paper')
  elif predict[0,1]!=0:
    print('Rock')
  else:
    print('Scissors')